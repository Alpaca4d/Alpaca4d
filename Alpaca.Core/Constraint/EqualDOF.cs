using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Rhino.Geometry;
using Alpaca4d.Element;
using Alpaca4d.Generic;

namespace Alpaca4d.Constraints
{
    public partial class EqualDOF : EntityBase, IConstraint, IStructure, ISerialize
    {

        public Rhino.Geometry.Point3d MasterNode { get; set; }
        public Rhino.Geometry.Point3d SlaveNode { get; set; }
        public int MasterNodeId { get; set; }
        public int SlaveNodeId { get; set; }
        public bool Dof_x { get; set; }
        public bool Dof_y { get; set; }
        public bool Dof_z { get; set; }
        public bool Dof_xx { get; set; }
        public bool Dof_yy { get; set; }
        public bool Dof_zz { get; set; }
        public ConstraintType ConstraintType => ConstraintType.EqualDof;


        // MASTER WILL ALWAYS BE IN THREE NDF WHEN AUTOGENERATED!!!
        public void SetNodeTag(Model model)
        {
            if (this.MasterNode.DistanceTo(Rhino.Collections.Point3dList.ClosestPointInList(model.UniquePointsThreeNDF, this.MasterNode)) < model.Tollerance)
            {
                this.MasterNodeId = model.CloudPointThreeNDF.ClosestPoint(this.MasterNode) + 1;
            }
            else if (this.MasterNode.DistanceTo(Rhino.Collections.Point3dList.ClosestPointInList(model.UniquePointsSixNDF, this.MasterNode)) < model.Tollerance)
            {
                this.MasterNodeId = model.CloudPointSixNDF.ClosestPoint(this.MasterNode) + 1 + model.UniquePointsThreeNDF.Count();
            }

            if (this.SlaveNode.DistanceTo(Rhino.Collections.Point3dList.ClosestPointInList(model.UniquePointsThreeNDF, this.SlaveNode)) < model.Tollerance)
            {
                this.SlaveNodeId = model.CloudPointThreeNDF.ClosestPoint(this.SlaveNode) + 1;
            }
            else if (this.SlaveNode.DistanceTo(Rhino.Collections.Point3dList.ClosestPointInList(model.UniquePointsSixNDF, this.SlaveNode)) < model.Tollerance)
            {
                this.SlaveNodeId = model.CloudPointSixNDF.ClosestPoint(this.SlaveNode) + 1 + model.UniquePointsThreeNDF.Count();
            }
        }



        public void SetTopologyRTree(Model model)
        {
            var tol = model.Tollerance;
            var pointAtStart = this.MasterNode;
            var pointAtEnd = this.SlaveNode;
            var curvePoints = new List<Rhino.Geometry.Point3d> { pointAtStart, pointAtEnd };

            var closestIndexes = new List<int>();

            void SearchCallback(object sender, RTreeEventArgs e)
            {
                closestIndexes.Add(e.Id + 1);
            }

            foreach (var pt in curvePoints)
            {
                model.RTreeCloudPointSixNDF.Search(new Rhino.Geometry.Sphere(pt, tol), SearchCallback);
            }

            this.MasterNodeId = closestIndexes[0] + model.UniquePointsThreeNDF.Count;
            this.SlaveNodeId = closestIndexes[1] + model.UniquePointsThreeNDF.Count;
        }

        public List<bool> Dof { get; set; }

        public EqualDOF(Point3d masterNode, Point3d slaveNode, bool dofX, bool dofY, bool dofZ, bool dofXX, bool dofYY, bool dofZZ)
        {
            this.MasterNode = masterNode;
            this.SlaveNode = slaveNode;
            this.Dof_x = dofX;
            this.Dof_y = dofY;
            this.Dof_z = dofZ;
            this.Dof_xx = dofXX;
            this.Dof_yy = dofYY;
            this.Dof_zz = dofZZ;
            this.Dof = new List<bool>() { dofX, dofY, dofZ, dofXX, dofYY, dofZZ };
        }

        public override string WriteTcl()
        {
            var dofs = new List<int>();

            int i;
            for(i = 0; i < 5; i++)
            {
                if(this.Dof[i] == true)
                {
                    dofs.Add(i+1);
                }
            }

            string dof = String.Join(" ", dofs);
            string tcl = $"equalDOF {this.MasterNodeId} {this.SlaveNodeId} {dof}\n";

            return tcl;
        }
    }
}
